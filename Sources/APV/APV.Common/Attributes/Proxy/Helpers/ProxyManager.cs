using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Activation;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Remoting.Proxies;
using APV.Common.Attributes.Proxy.Attributes;
using APV.Common.Attributes.Proxy.Interfaces;

namespace APV.Common.Attributes.Proxy.Helpers
{
    internal class ProxyManager : RealProxy, IProxyManager
    {
        private readonly Type _sourceType;
        private readonly Type _wrappedType;
        private readonly ProxyManagerAttribute _proxyAttribute;

        private MarshalByRefObject _transparentProxy;
        private MarshalByRefObject _instance;
        private IProxy _proxy;

        private ProxyManager(Type sourceType, Type wrappedType, ProxyManagerAttribute proxyAttribute, bool autogenerated)
            : base(wrappedType)
        {
            _sourceType = sourceType;
            _wrappedType = wrappedType;
            _proxyAttribute = proxyAttribute;
            if (!autogenerated)
            {
                _instance = (MarshalByRefObject) Activator.CreateInstance(_wrappedType, true);
                _proxy = (_instance as IProxy);
            }
        }

        [DebuggerStepThrough]
        private IMessage HandleMethodCall(IMethodCallMessage methodCallMessage)
        {
            //var methodCallMessage = new MethodCallMessageWrapper((IMethodCallMessage)message);
            MethodBase methodBase = methodCallMessage.MethodBase;
            if ((methodBase != null) && (_proxy != null) && (methodBase.IsSpecialName))
            {
                _proxy.OnMethodInvoke(this, methodBase);
            }

            IMethodReturnMessage returnMessage = RemotingServices.ExecuteMessage(_instance, methodCallMessage);

            if ((methodBase != null) && (_proxy != null) && (returnMessage.Exception != null))
            {
                _proxy.OnMethodError(this, methodBase, returnMessage.Exception);
            }

            return returnMessage;
        }

        public void Dispose()
        {
            DetachServer();
        }

        [DebuggerStepThrough]
        public override IMessage Invoke(IMessage message)
        {
            if (message is IConstructionCallMessage)
            {
                var constructionCallMessage = (IConstructionCallMessage)message;
                IConstructionReturnMessage returnMessage = InitializeServerObject(constructionCallMessage);
                _instance = GetUnwrappedServer();
                _proxy = (_instance as IProxy);
                if (_proxy != null)
                {
                    SetStubData(this, _instance);
                }
                return returnMessage;
            }

            if (message is IMethodCallMessage)
            {
                return HandleMethodCall((IMethodCallMessage)message);
            }
            
            throw new NotSupportedException(string.Format("Unknown message type \"{0}\".", message.GetType()));
        }

        internal static IProxyManager Create(Type type, ProxyManagerAttribute attribute, bool autogenerated)
        {
            if (type == null)
                throw new ArgumentNullException("type");
            if (attribute == null)
                throw new ArgumentNullException("attribute");

            Type wrapper = WrappersManager.GetWrapper(type);
            return new ProxyManager(type, wrapper, attribute, autogenerated);
        }

        #region IProxyManager

        public Type SourceType
        {
            get { return _sourceType; }
        }

        public Type WrappedType
        {
            get { return _wrappedType; }
        }

        public ProxyManagerAttribute ProxyAttribute
        {
            get { return _proxyAttribute; }
        }

        public MarshalByRefObject Instance
        {
            get { return _instance; }
        }

        public MarshalByRefObject TransparentProxy
        {
            get { return _transparentProxy ?? (_transparentProxy = (MarshalByRefObject) GetTransparentProxy()); }
        }

        #endregion
    }
}